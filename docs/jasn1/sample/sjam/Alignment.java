/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package sjam;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

public final class Alignment {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 6);
	protected BerIdentifier id;

	public byte[] code = null;
	public BerVisibleString qname = null;

	public BerInteger flag = null;

	public BerVisibleString rname = null;

	public BerInteger pos = null;

	public BerInteger mapq = null;

	public BerVisibleString cigar = null;

	public BerVisibleString rnext = null;

	public BerInteger pnext = null;

	public BerInteger tlen = null;

	public BerVisibleString seq = null;

	public BerVisibleString qual = null;

	public Alignment() {
		id = identifier;
	}

	public Alignment(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public Alignment(BerVisibleString qname, BerInteger flag, BerVisibleString rname, BerInteger pos, BerInteger mapq, BerVisibleString cigar, BerVisibleString rnext, BerInteger pnext, BerInteger tlen, BerVisibleString seq, BerVisibleString qual) {
		id = identifier;
		this.qname = qname;
		this.flag = flag;
		this.rname = rname;
		this.pos = pos;
		this.mapq = mapq;
		this.cigar = cigar;
		this.rnext = rnext;
		this.pnext = pnext;
		this.tlen = tlen;
		this.seq = seq;
		this.qual = qual;
	}

	public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				berOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += qual.encode(berOStream, true);
			
			codeLength += seq.encode(berOStream, true);
			
			codeLength += tlen.encode(berOStream, true);
			
			codeLength += pnext.encode(berOStream, true);
			
			codeLength += rnext.encode(berOStream, true);
			
			codeLength += cigar.encode(berOStream, true);
			
			codeLength += mapq.encode(berOStream, true);
			
			codeLength += pos.encode(berOStream, true);
			
			codeLength += rname.encode(berOStream, true);
			
			codeLength += flag.encode(berOStream, true);
			
			codeLength += qname.encode(berOStream, true);
			
			codeLength += BerLength.encodeLength(berOStream, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(berOStream);
		}

		return codeLength;

	}

	public int decode(InputStream iStream, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		int choiceDecodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();
		boolean decodedIdentifier = false;

		if (explicit) {
			codeLength += id.decodeAndCheck(iStream);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(iStream);

		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				qname = new BerVisibleString();
				subCodeLength += qname.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerInteger.identifier)) {
				flag = new BerInteger();
				subCodeLength += flag.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				rname = new BerVisibleString();
				subCodeLength += rname.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerInteger.identifier)) {
				pos = new BerInteger();
				subCodeLength += pos.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerInteger.identifier)) {
				mapq = new BerInteger();
				subCodeLength += mapq.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				cigar = new BerVisibleString();
				subCodeLength += cigar.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				rnext = new BerVisibleString();
				subCodeLength += rnext.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerInteger.identifier)) {
				pnext = new BerInteger();
				subCodeLength += pnext.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerInteger.identifier)) {
				tlen = new BerInteger();
				subCodeLength += tlen.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				seq = new BerVisibleString();
				subCodeLength += seq.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				qual = new BerVisibleString();
				subCodeLength += qual.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength != length.val) {
			throw new IOException("Decoded sequence has wrong length tag");

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(berOStream, false);
		code = berOStream.getArray();
	}
}

