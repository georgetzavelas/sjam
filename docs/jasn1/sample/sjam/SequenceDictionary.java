/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package sjam;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

public final class SequenceDictionary {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 3);
	protected BerIdentifier id;

	public byte[] code = null;
	public BerVisibleString sequenceName = null;

	public BerInteger sequenceLength = null;

	public BerVisibleString assemblyIdentifier = null;

	public BerOctetString checksum = null;

	public BerVisibleString species = null;

	public BerVisibleString uri = null;

	public SequenceDictionary() {
		id = identifier;
	}

	public SequenceDictionary(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public SequenceDictionary(BerVisibleString sequenceName, BerInteger sequenceLength, BerVisibleString assemblyIdentifier, BerOctetString checksum, BerVisibleString species, BerVisibleString uri) {
		id = identifier;
		this.sequenceName = sequenceName;
		this.sequenceLength = sequenceLength;
		this.assemblyIdentifier = assemblyIdentifier;
		this.checksum = checksum;
		this.species = species;
		this.uri = uri;
	}

	public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				berOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (uri != null) {
				codeLength += uri.encode(berOStream, true);
			}
			
			if (species != null) {
				codeLength += species.encode(berOStream, true);
			}
			
			if (checksum != null) {
				codeLength += checksum.encode(berOStream, true);
			}
			
			if (assemblyIdentifier != null) {
				codeLength += assemblyIdentifier.encode(berOStream, true);
			}
			
			codeLength += sequenceLength.encode(berOStream, true);
			
			codeLength += sequenceName.encode(berOStream, true);
			
			codeLength += BerLength.encodeLength(berOStream, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(berOStream);
		}

		return codeLength;

	}

	public int decode(InputStream iStream, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		int choiceDecodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();
		boolean decodedIdentifier = false;

		if (explicit) {
			codeLength += id.decodeAndCheck(iStream);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(iStream);

		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				sequenceName = new BerVisibleString();
				subCodeLength += sequenceName.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerInteger.identifier)) {
				sequenceLength = new BerInteger();
				subCodeLength += sequenceLength.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				assemblyIdentifier = new BerVisibleString();
				subCodeLength += assemblyIdentifier.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerOctetString.identifier)) {
				checksum = new BerOctetString();
				subCodeLength += checksum.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				species = new BerVisibleString();
				subCodeLength += species.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleString.identifier)) {
				uri = new BerVisibleString();
				subCodeLength += uri.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength != length.val) {
			throw new IOException("Decoded sequence has wrong length tag");

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(berOStream, false);
		code = berOStream.getArray();
	}
}

