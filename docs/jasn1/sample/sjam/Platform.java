/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package sjam;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

public final class Platform {

	public byte[] code = null;
	public BerInteger capillary = null;

	public BerInteger ls454 = null;

	public BerInteger illumina = null;

	public BerInteger solid = null;

	public BerInteger helicos = null;

	public BerInteger iontorrent = null;

	public BerInteger pacbio = null;

	public Platform() {
	}

	public Platform(byte[] code) {
		this.code = code;
	}

	public Platform(BerInteger capillary, BerInteger ls454, BerInteger illumina, BerInteger solid, BerInteger helicos, BerInteger iontorrent, BerInteger pacbio) {
		this.capillary = capillary;
		this.ls454 = ls454;
		this.illumina = illumina;
		this.solid = solid;
		this.helicos = helicos;
		this.iontorrent = iontorrent;
		this.pacbio = pacbio;
	}

	public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {
		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				berOStream.write(code[i]);
			}
			return code.length;

		}
		int codeLength = 0;
		if (pacbio != null) {
			codeLength += pacbio.encode(berOStream, true);
			return codeLength;

		}
		
		if (iontorrent != null) {
			codeLength += iontorrent.encode(berOStream, true);
			return codeLength;

		}
		
		if (helicos != null) {
			codeLength += helicos.encode(berOStream, true);
			return codeLength;

		}
		
		if (solid != null) {
			codeLength += solid.encode(berOStream, true);
			return codeLength;

		}
		
		if (illumina != null) {
			codeLength += illumina.encode(berOStream, true);
			return codeLength;

		}
		
		if (ls454 != null) {
			codeLength += ls454.encode(berOStream, true);
			return codeLength;

		}
		
		if (capillary != null) {
			codeLength += capillary.encode(berOStream, true);
			return codeLength;

		}
		
		throw new IOException("Error encoding BerChoice: No item in choice was selected.");
	}

	public int decode(InputStream iStream, BerIdentifier berIdentifier) throws IOException {
		int codeLength = 0;
		int choiceDecodeLength = 0;
		BerIdentifier passedIdentifier = berIdentifier;
		if (berIdentifier == null) {
			berIdentifier = new BerIdentifier();
			codeLength += berIdentifier.decode(iStream);
		}
		if (berIdentifier.equals(BerInteger.identifier)) {
			capillary = new BerInteger();
			codeLength += capillary.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerInteger.identifier)) {
			ls454 = new BerInteger();
			codeLength += ls454.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerInteger.identifier)) {
			illumina = new BerInteger();
			codeLength += illumina.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerInteger.identifier)) {
			solid = new BerInteger();
			codeLength += solid.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerInteger.identifier)) {
			helicos = new BerInteger();
			codeLength += helicos.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerInteger.identifier)) {
			iontorrent = new BerInteger();
			codeLength += iontorrent.decode(iStream, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerInteger.identifier)) {
			pacbio = new BerInteger();
			codeLength += pacbio.decode(iStream, false);
			return codeLength;
		}

		if (passedIdentifier != null) {
			return 0;
		}
		throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(berOStream, false);
		code = berOStream.getArray();
	}
}

